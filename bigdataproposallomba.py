# -*- coding: utf-8 -*-
"""Climate_Change.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tFIF-LoxG5VQ1pU5XL1XOHhTWLIAFMP_
"""

# Mengimpor library/pustaka yang akan digunakan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.pyplot as plt

# Membuat variabel untuk menampung dan melakukan pembacaan dataset dengan format csv
df = pd.read_csv('/content/annual-co-emissions-by-region.csv')
df

# Hitung total emisi per negara dan tahun
total_emisi_per_negara_tahun = dataset.groupby(['Code', 'Year'])['Annual CO2 emissions (zero filled)'].sum()

# Buat dataframe baru
df_negara_berkontribusi = pd.DataFrame(columns=['Year', 'Country', 'Total Emissions'])

# Looping untuk setiap tahun
for tahun in dataset['Year'].unique():
    # Filter data untuk tahun tertentu
    data_tahun = total_emisi_per_negara_tahun.loc[:, tahun]

    # Urutkan data berdasarkan total emisi pada tahun tertentu
    data_urut = data_tahun.sort_values(ascending=False)

    # Tambahkan data ke dataframe
    df_tahun = pd.DataFrame({'Year': tahun, 'Country': data_urut.index, 'Total Emissions': data_urut.values})
    df_negara_berkontribusi = pd.concat([df_negara_berkontribusi, df_tahun], ignore_index=True)

# Tampilkan dataset hasil identifikasi dan pengurutan
# print(df_negara_berkontribusi)
df_negara_berkontribusi
df_negara_berkontribusi.to_csv('df_negara_berkontribusi.csv', index=False)

df.head() # Menampilkan data teratas
df.info() # Menampilkan informasi mengenai dataset

print("Statistik Deskriptif Fitur Numerical :") # Menampilkan data statistik numerikal
df.describe()

print("Statistik Deskriptif Fitur Categorical :") # Menampilkan data statistik fitur kategorikal
df.describe(exclude=np.number)

# Plot time series
fig, ax = plt.subplots(figsize=(120, 60))

# Looping untuk setiap negara dalam dataset terurut
for negara in df_negara_berkontribusi['Country'].unique():
    # Filter data negara
    data_negara = df_negara_berkontribusi[df_negara_berkontribusi['Country'] == negara]

    # Plot time series
    ax.plot(data_negara['Year'], data_negara['Total Emissions'], label=negara)

# Konfigurasi plot
ax.set_xlabel('Year')
ax.set_ylabel('Total Emissions')
ax.set_title('Time Series of Emissions by Country')
ax.legend(loc='upper left')

# Simpan plot sebagai file JPEG
plt.savefig('time_series_plot.jpeg', dpi=300, bbox_inches='tight')

# Tampilkan plot
plt.show()

for column in df.select_dtypes(include=['float64', 'int64']).columns:
  plt.figure(figsize = (10,6))
  plt.axvline(df[column].describe()['25%'], color = 'green', label = 'Q1')
  plt.axvline(df[column].describe()['mean'], color = 'red', label = 'Mean')
  plt.axvline(df[column].describe()['50%'], color = 'yellow', label = 'Median(Q2)')
  plt.axvline(df[column].describe()['75%'], color = 'blue', label = 'Q3')
  sns.distplot(df[column])
  plt.legend()
  plt.title('Statistik Deskriptif Bar Chart')
  plt.show()

for column in df.select_dtypes(include=['float64', 'int64']).columns:
  plt.figure(figsize = (10, 5))
  sns.boxplot(x= df[column])
  plt.axvline(df[column].describe()['25%'], color = 'red', label = 'Q1')
  plt.axvline(df[column].describe()['50%'], color = 'yellow', label = 'Q2')
  plt.axvline(df[column].describe()['75%'], color = 'blue', label = 'Q3')
  plt.annotate('Outlier', (df[column].describe()['max'],0.1),
              xytext = (df[column].describe()['max'],0.3), arrowprops = dict(facecolor = 'blue'), fontsize = 13)
  IQR = df[column].describe()['75%'] - df[column].describe()['25%']
  plt.annotate('Batas Atas', (df[column].describe()['75%'] + 1.5*IQR, 0.2),
              xytext = (df[column].describe()['75%'] + 1.5*IQR, 0.4), arrowprops = dict(facecolor = 'blue'), fontsize = 13)
  plt.annotate('Batas Bawah', (df[column].describe()['min'], 0.2),
              xytext = (df[column].describe()['min'], 0.4), arrowprops = dict(facecolor = 'blue'), fontsize = 13)
  plt.legend()